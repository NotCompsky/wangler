#!/usr/bin/env python3


import re
import yaml


NEWLINE:str = "\n"


def generate_cmakelists_txt(src:str, dst:str):
	cfg:dict = yaml.safe_load(open(src))
	
	cfg["library_names"]["MYSQL_CLIENT"] = ["mariadbclient mysqlclient", "mariadbclient.a libmariadbclient.a mariadb/mariadbclient.a mariadb/libmariadbclient.a mysqlclient.a libmysqlclient.a mysql/mysqlclient.a mysql/libmysqlclient.a"]
	cfg["required_packages"] += ["fizz", "Threads", "folly", "wangle", "gflags", "Compsky"]
	
	def wget_and_esc_required_by_server__target_name(key:str):
		return re.sub("[^A-Za-z0-9_]+", "_", key)
	
	def wget_and_esc_required_by_server__create_target(src:str, dst:str):
		return f"""
			add_custom_target(
				{wget_and_esc_required_by_server__target_name(dst)} ALL
				COMMAND "${{SCRIPTS_DIR}}/wget-and-escape" "{dst}" "{src}" 
				BYPRODUCTS "{dst}"
				COMMENT "Downloading datetimepicker.css"
			)
		"""
	
	open(dst, "w").write(f"""
# Automatically generated by wangler.py (Copyright Adam Gray 2020 GPLv3 etc.)

cmake_minimum_required(VERSION 3.7)

# If you have installed Proxygen, you can use
# cmake -Dproxygen_root_DIR=/path/to/proxygen/root/dir

if(proxygen_root_DIR)
	set(proxygen_cmake_DIR "${{proxygen_root_DIR}}/proxygen/_build/deps/lib/cmake")
	
	if(NOT wangle_DIR)
		set(wangle_DIR "${{proxygen_cmake_DIR}}/wangle")
	endif()
	
	if(NOT folly_DIR)
		set(folly_DIR "${{proxygen_cmake_DIR}}/folly")
	endif()
	
	if(NOT fizz_DIR)
		set(fizz_DIR "${{proxygen_cmake_DIR}}/fizz")
	endif()
else()
	message(WARNING "You might want to define -Dproxygen_root_DIR=/path/to/proxygen/root for ease - defines proxygen_cmake_DIR, wangle_DIR, folly_DIR and fizz_DIR")
endif()

set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build Type")
option(MANGLE_JS_NAMES "Minimise the names of JavaScript functions and variables" OFF)
option(DISPLAY_LICENSES_INLINE "Display static component licenses inline" ON)
option(ENABLE_STATIC "Build static executable, rather than linked" OFF)
{cfg["custom_options"]}

if(MANGLE_JS_NAMES)
	set(MANGLE_JS_NAMES_ARGS "--mangle")
else()
	set(MANGLE_JS_NAMES_ARGS "")
endif()

{NEWLINE.join([f"find_package({name} REQUIRED)" for name in cfg["required_packages"]])}

if(ENABLE_STATIC)
	{NEWLINE.join([f"set({name}_NAMES {val[1]})" for name, val in cfg["library_names"].items()])}
else()
	{NEWLINE.join([f"set({name}_NAMES {val[0]})" for name, val in cfg["library_names"].items()])}
endif()
{NEWLINE.join([f"find_library({name} NAMES ${{{name}_NAMES}})" for name in cfg["library_names"]])}

set(SRC_DIR "${{CMAKE_CURRENT_SOURCE_DIR}}/src")
set(SCRIPTS_DIR "${{CMAKE_CURRENT_SOURCE_DIR}}/scripts")
set(AUTO_SRC_DIR "${{SRC_DIR}}/auto-generated")
{cfg["custom_vars"]}

file(MAKE_DIRECTORY "${{AUTO_SRC_DIR}}")
# Creates directory during build system generation

add_executable(server "${{SRC_DIR}}/server.cpp" {cfg["server_sources"]})
set_target_properties(
	server
	PROPERTIES
		CXX_STANDARD 17
		INTERPROCEDURAL_OPTIMIZATION TRUE
		LINK_FLAGS_RELEASE -s
)
target_include_directories(server PRIVATE "${{WANGLE_INCLUDE_DIR}}" "${{COMPSKY_INCLUDE_DIRS}}" {cfg["server_includes"]})
target_link_libraries(server PRIVATE "${{MYSQL_CLIENT}}" wangle::wangle {cfg["server_linked_libs"]})

{cfg["server_required_actions"]}

add_custom_target(
	auto__server_determine_response_hpp ALL
	DEPENDS "${{SRC_DIR}}/server-endpoints.txt" # CMake does not seem to have an option to only rerun when dependency is modified
	COMMAND ${{PYTHON_EXECUTABLE}} "${{SCRIPTS_DIR}}/triegen.py" "${{SRC_DIR}}/server-endpoints.txt" "${{AUTO_SRC_DIR}}/auto__server-determine-response.hpp"
	BYPRODUCTS "${{AUTO_SRC_DIR}}/auto__server-determine-response.hpp"
	COMMENT "Generating bigboi switch statement"
)

add_custom_target(
	js_hpp ALL
	COMMAND ${{PYTHON_EXECUTABLE}} "${{SCRIPTS_DIR}}/minjs.py" "${{MANGLE_JS_NAMES_ARGS}}" "ALL" "${{AUTO_SRC_DIR}}/js.hpp" "${{SRC_DIR}}/static/js/" #"${{SRC_DIR}}/static/js/3rd-party/datetimepicker.js"
	BYPRODUCTS "${{AUTO_SRC_DIR}}/js.hpp"
	COMMENT "Generating minimised JavaScript header"
)

add_custom_target(
	svg_hpp ALL
	COMMAND ${{PYTHON_EXECUTABLE}} "${{SCRIPTS_DIR}}/svggen.py" "${{DISPLAY_LICENSES_INLINE_ARGS}}" "${{AUTO_SRC_DIR}}/svg.hpp" "${{SRC_DIR}}/html/svg"
	BYPRODUCTS "${{AUTO_SRC_DIR}}/svg.hpp"
	COMMENT "Generating SVG icons header"
)

{NEWLINE.join([wget_and_esc_required_by_server__create_target(val, key) for key, val in cfg["wget_and_escapes_required_by_server"].items()])}

{cfg["custom_targets"]}

set(DISPLAY_LICENSES_INLINE_ARGS)
if(DISPLAY_LICENSES_INLINE)
	set(DISPLAY_LICENSES_INLINE_ARGS "--display-licences")
endif()

{cfg["misc"]}

add_dependencies(server auto__server_determine_response_hpp js_hpp svg_hpp {cfg["server_dependencies"]} {" ".join([wget_and_esc_required_by_server__target_name(name) for name in cfg["wget_and_escapes_required_by_server"]])})

{NEWLINE.join([f"target_compile_definitions(server PRIVATE {x})" for x in cfg["server_compile_defs"]])}

	""".strip())


if __name__ == "__main__":
	import argparse
	import os
	
	parser = argparse.ArgumentParser()
	parser.add_argument("src")
	parser.add_argument("dst")
	args = parser.parse_args()
	
	if os.path.isfile(args.dst):
		print(f"Destination exists: {args.dst}")
		if input("Continue? [y=yes]: ") != "y":
			exit(0)
	
	generate_cmakelists_txt(args.src, args.dst)
